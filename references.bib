@inbook{cardelli2004,
    author={Cardelli, Luca},
    title={Type Systems},
booktitle={Computer science handbook},
  editor={Tucker, Allen B},
  year={2004},
  publisher={Chapman and Hall/CRC}
}

@misc{poe_what_nodate,
	title = {What to know before debating type systems {\textbar} {Ovid} [blogs.perl.org]},
	url = {https://blogs.perl.org/users/ovid/2010/08/what-to-know-before-debating-type-systems.html},
	author = {Poe, Curtis},
	file = {What to know before debating type systems | Ovid [blogs.perl.org]:/home/nathan/Zotero/storage/6RJPQFF6/what-to-know-before-debating-type-systems.html:text/html},
}

@article{remy2013type,
  title={Type systems for programming languages},
  author={R{\'e}my, Didier},
  journal={MPRI lecture notes},
  pages={64},
  year={2013}
}

@inproceedings{politz_python_2013,
	address = {Indianapolis Indiana USA},
	title = {Python: the full monty},
	isbn = {978-1-4503-2374-1},
	shorttitle = {Python},
	url = {https://dl.acm.org/doi/10.1145/2509136.2509536},
	doi = {10.1145/2509136.2509536},
	abstract = {We present a small-step operational semantics for the Python programming language. We present both a core language for Python, suitable for tools and proofs, and a translation process for converting Python source to this core. We have tested the composition of translation and evaluation of the core for conformance with the primary Python implementation, thereby giving conﬁdence in the ﬁdelity of the semantics. We brieﬂy report on the engineering of these components. Finally, we examine subtle aspects of the language, identifying scope as a pervasive concern that even impacts features that might be considered orthogonal.},
	language = {en},
	booktitle = {Proceedings of the 2013 {ACM} {SIGPLAN} international conference on {Object} oriented programming systems languages \& applications},
	publisher = {ACM},
	author = {Politz, Joe Gibbs and Martinez, Alejandro and Milano, Mae and Warren, Sumner and Patterson, Daniel and Li, Junsong and Chitipothu, Anand and Krishnamurthi, Shriram},
	month = oct,
	year = {2013},
	pages = {217--232},
	file = {PDF:/home/nathan/Zotero/storage/9CXJV4FU/Politz et al. - 2013 - Python the full monty.pdf:application/pdf},
}

@article{dunfield_bidirectional_2022,
	title = {Bidirectional {Typing}},
	volume = {54},
	issn = {0360-0300, 1557-7341},
	url = {https://dl.acm.org/doi/10.1145/3450952},
	doi = {10.1145/3450952},
	abstract = {Bidirectional typing combines two modes of typing: type checking, which checks that a program satisfies a known type, and type synthesis, which determines a type from the program. Using checking enables bidirectional typing to support features for which inference is undecidable; using synthesis enables bidirectional typing to avoid the large annotation burden of explicitly typed languages. In addition, bidirectional typing improves error locality. We highlight the design principles that underlie bidirectional type systems, survey the development of bidirectional typing from the prehistoric period before Pierce and Turner’s local type inference to the present day, and provide guidance for future investigations.},
	language = {en},
	number = {5},
	journal = {ACM Computing Surveys},
	author = {Dunfield, Jana and Krishnaswami, Neel},
	month = jun,
	year = {2022},
	pages = {1--38},
	file = {PDF:/home/nathan/Zotero/storage/XU7KMYUB/Dunfield and Krishnaswami - 2022 - Bidirectional Typing.pdf:application/pdf},
}

@techreport{Pierce:BQB,
  author = {Benjamin C. Pierce},
  title = {Bounded Quantification with Bottom},
  year = {1997},
  institution = {Computer Science Department, Indiana University},
  series = {CSCI},
  number = {492},
  plclub = {Yes},
  bcp = {Yes},
  keys = {subtyping},
  tr = {http://www.cis.upenn.edu/~bcpierce/papers/bqb.ps}
}

@inbook{Pierce:SF2Subtyping,
  author = {Benjamin C. Pierce and Arthur {Azevedo de Amorim}
                  and Chris Casinghino and Marco Gaboardi and
                  Michael Greenberg and C\v{a}t\v{a}lin Hri\c{t}cu
                  and Vilhelm Sj\"{o}berg and Andrew Tolmach
                  and Brent Yorgey},
title = {Sub: Subtyping},  
booktitle = {Programming Language Foundations},
  series = {Software Foundations series, volume 2},
  month = may,
  year = {2018},
  publisher = {Electronic textbook},
  plclub = {Yes},
  bcp = {Yes},
  keys = {verification,books},
  note = {Version 5.5.  \URL{http://www.cis.upenn.edu/~bcpierce/sf}},
  ebook = {http://www.cis.upenn.edu/~bcpierce/sf},
  japanese = {http://proofcafe.org/sf},
url = {https://softwarefoundations.cis.upenn.edu/plf-current/Sub.html}
}



@misc{noauthor_tiobe_nodate,
	title = {{TIOBE} {Index} {(Python)}},
	url = {https://www.tiobe.com/tiobe-index/python/},
	language = {en-US},
	publisher = {TIOBE},
}

@misc{jsiek_what_2014,
	title = {What is {Gradual} {Typing} {\textbar} {Jeremy} {Siek}},
	url = {https://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/},
	abstract = {(For a Japanese translation, go here) Gradual typing is a type system I developed with Walid Taha in 2006 that allows parts of a program to be dynamically typed and other parts to be statically typed. The programmer controls which parts are which by either leaving out type annotations or by adding them in. This},
	language = {en-US},
	urldate = {2024-12-14},
	author = {{jsiek}},
	month = mar,
	year = {2014},
	file = {Snapshot:/home/nathan/Zotero/storage/SYQ83JD4/what-is-gradual-typing.html:text/html},
}


@article{castagna_gradual_2019,
	title = {Gradual typing: a new perspective},
	volume = {3},
	shorttitle = {Gradual typing},
	url = {https://dl.acm.org/doi/10.1145/3290329},
	doi = {10.1145/3290329},
	abstract = {We define a new, more semantic interpretation of gradual types and use it to ``gradualize'' two forms of polymorphism: subtyping polymorphism and implicit parametric polymorphism. In particular, we use the new interpretation to define three gradual type systems ---Hindley-Milner, with subtyping, and with union and intersection types--- in terms of two preorders, subtyping and materialization. We define these systems both declaratively ---by adding two subsumption-like rules--- which yields clearer, more intelligible, and streamlined definitions, and algorithmically by reusing existing techniques such as unification and tallying.},
	number = {POPL},
	journal = {Proc. ACM Program. Lang.},
	author = {Castagna, Giuseppe and Lanvin, Victor and Petrucciani, Tommaso and Siek, Jeremy G.},
	month = jan,
	year = {2019},
	pages = {16:1--16:32},
	file = {Full Text PDF:/home/nathan/Zotero/storage/5PQ94JJG/Castagna et al. - 2019 - Gradual typing a new perspective.pdf:application/pdf},
}

@article{garcia2016abstracting,
  title={Abstracting gradual typing},
  author={Garcia, Ronald and Clark, Alison M and Tanter, {\'E}ric},
  journal={ACM SIGPLAN Notices},
  volume={51},
  number={1},
  pages={429--442},
  year={2016},
  publisher={ACM New York, NY, USA}
}


@misc{pythontypespec,
	title = {Specification for the {Python} type system — typing documentation},
	url = {https://typing.readthedocs.io/en/latest/spec/index.html},
}


@misc{pythondatamodel,
	title = {3. {Data} model},
	url = {https://docs.python.org/3/reference/datamodel.html},
	abstract = {Objects, values and types: Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (In a sense, and in conformance to Von ...},
	language = {en},
	journal = {Python documentation},
}


@misc{pythonmro,
	title = {The {Python} 2.3 {Method} {Resolution} {Order}},
	url = {https://docs.python.org/3/howto/mro.html},
	abstract = {By Michele Simionato. Abstract, This document is intended for Python programmers who want to understand the C3 Method Resolution Order used in Python 2.3. Although it is not intended for newbies, i...},
	language = {en},
author= {Simionato, Michele},
	journal = {Python documentation},
	file = {Snapshot:/home/nathan/Zotero/storage/AM4XFTIT/mro.html:text/html},
}


@misc{tctestresults,
	title = {Type {System} {Test} {Results}},
	url = {https://htmlpreview.github.io/?https://github.com/python/typing/blob/main/conformance/results/results.html},
publisher= {Python Software Foundation},
}
